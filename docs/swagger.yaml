basePath: /
definitions:
  app.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  project.Project:
    properties:
      dependencies:
        items:
          type: string
        type: array
      description:
        type: string
      dev_dependencies:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
      repo_url:
        type: string
      site_url:
        type: string
      status:
        type: string
      user:
        type: string
    type: object
  user.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.UserResponse:
    properties:
      id:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: testing
  title: Test
  version: "3.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/app.ErrorResponse'
      summary: Login a user
      tags:
      - users
  /projects:
    get:
      consumes:
      - application/json
      description: Retrieve all projects for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/project.Project'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all projects for the authenticated user
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project for the authenticated user
      parameters:
      - description: Project details
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/project.Project'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/project.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - projects
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project by ID for the authenticated user
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Retrieve a single project by its ID for the authenticated user
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a single project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update the details of an existing project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated project details
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/project.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing project
      tags:
      - projects
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrorResponse'
      summary: Register a new user
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
